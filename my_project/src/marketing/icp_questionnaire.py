from my_project.src.core.llm_service import LLMService
import streamlit as st

def render_icp_questionnaire():
    """
    Render the Ideal Customer Profile (ICP) Questionnaire.
    Collect user inputs for demographics, pain points, goals, and communication channels.
    """
    st.title("Ideal Customer Profile (ICP) Questionnaire")
    st.markdown("Answer the following questions to generate an ideal customer profile.")

    # Input fields for ICP data
    demographics = st.text_area("Describe your ideal customer demographics")
    pain_points = st.text_area("List the main pain points of your ideal customer")
    goals = st.text_area("What goals does your ideal customer want to achieve?")
    channels = st.multiselect(
        "Preferred communication channels",
        ["Email", "Social Media", "Phone", "Website", "Other"]
    )

    # Button to Generate ICP Profile
    if st.button("Generate ICP Profile"):
        if demographics and pain_points and goals:
            # Create the prompt for the LLMService
            llm_service = LLMService()
            data = {
                "demographics": demographics,
                "pain_points": pain_points,
                "goals": goals,
                "channels": channels
            }
            prompt = (
                f"Generate an ICP profile based on the following data: {data}. "
                "Include a dominant archetype and actionable recommendations."
            )

            # Call LLMService to generate the profile
            with st.spinner("Generating ICP Profile..."):
                try:
                    results = llm_service.generate_response(prompt)
                    display_icp_profile(results)
                except Exception as e:
                    st.error(f"An error occurred while generating the profile: {str(e)}")
        else:
            st.warning("Please fill out all fields to generate the ICP profile.")


def display_icp_profile(profile):
    """
    Display the generated Ideal Customer Profile (ICP).
    Args:
        profile (dict): The ICP profile data generated by LLMService.
    """
    st.subheader("Generated ICP Profile")

    # Display the generated profile data
    st.write(f"**Target Archetype:** {profile.get('archetypes', {}).get('dominant', 'Not available')}")
    st.write(f"**Demographics:** {profile.get('demographics', 'Not provided')}")
    st.write(f"**Pain Points:** {profile.get('pain_points', 'Not provided')}")
    st.write(f"**Goals:** {profile.get('goals', 'Not provided')}")
    st.write(f"**Preferred Channels:** {', '.join(profile.get('channels', []))}")

    # Recommendations Section
    st.write("### Recommendations")
    recommendations = profile.get("recommendations", [])
    if recommendations:
        for rec in recommendations:
            st.write(f"- {rec}")
    else:
        st.write("No specific recommendations provided.")

    # Restart Questionnaire Button
    if st.button("Restart Questionnaire"):
        st.experimental_rerun()
